
Classes:
  name: ['aeroplane', 'bicycle', 'bird', 'boat', 'bottle', 'bus',
           'car', 'cat', 'chair', 'cow', 'diningtable', 'dog', 'horse',
           'motorbike', 'person', 'pottedplant', 'sheep', 'sofa',
           'train', 'tvmonitor']
  num: 20
        

Model:
  name: General # [YOLO, General]
  backbone:
    pretrain: True # whether to use pretrain model
    weight_path: # if exist, means load this weight path to pretrain
    name: Resnet # [Darknet53, Resnet, shufflenetv2]
    depth: 50 # depth of ResNet model [18, 34, 50, 101, 152]
    # model_size: 1.0x # model size of shufflenetv2 model[0.5x, 1.0x, 1.5x, 2.0x]
  fpn:
    name: fpn
    channel_out: 256 # fpn层输出通道大小, 没有则默认是256
    out_stride: [8, 16, 32] # TODO: 用于输出多少x的特征图用来检测
  head:
    name: normal
    reg_head:
      out_channel: 4
      mid_channel: 256
      stack_layers: 4 # 用于指定卷积的层数
    cls_head:
      out_channel: 20
      mid_channel: 256
      stack_layers: 4 # 用于指定卷积的层数
    head_shared: True # TODO: 用于指定head对于不同的FPN层是否共享 
  anchors: 
    strides: [8, 16, 32, 64, 128]
    sizes: [32, 64, 128, 256, 512]
    ratios: [0.5, 1, 2]
    scales: [2 ** 0] # [2 ** 0, 2 ** (1.0 / 3.0), 2 ** (2.0 / 3.0)]
    num: 3
  metrics: yolo
  loss:
    reg_loss: 
      name: SmoothL1 #[SmoothL1, IOU]
      ratio: 10
    cls_loss: 
      name: Focal
      ratio: 1

Data:
  dataset_type: coco # type of dataset, now only support coco
  train:
    dataset_path: ./dataset/voc2coco # path of dataset
    pipeline:
      input_size: [640, 640]
      keep_ratio: False
      hsv_prob: 0.0
      flip_prob: 0.0
  test:
    dataset_path: ./dataset/voc2coco # path of dataset
    pipeline:
      input_size: [640, 640]
      keep_ratio: False
      


Schedule:
  resume_path: # if exist, means resume training from resume path
  device:
    gpus: 'cpu' # cuda device, i.e. 0 or 0,1,2,3 or cpu
    batch_size: 10
    num_workers: 4
  seed: 10
  epochs: 100
  optimizer:
    name: SGD
    lr: 0.15
    momentum: 0.9
    weight_decay: 0.0001
  lr_schedule:
    name: MultiStep_LR
    milestones: [35,70,85]
    gamma: 0.1
    warmup: 2

Log:
  save_path: ./result # where to save model(.pth) and tensorboard data
  tensorboard: True # whether to use tensorboard to collect results
  val_intervals: 5 # epochs to val 


# train
Train:
  TRAIN_IMG_SIZE: 320
  AUGMENT: False
  MULTI_SCALE_TRAIN: False
  IOU_THRESHOLD_LOSS: 0.5
  EPOCHS: 100
  NUMBER_WORKERS: 4
  MOMENTUM: 0.9
  WEIGHT_DECAY: 0.0001
  LR_INIT: 0.15
  LR_END: 0.000001
  WARMUP_EPOCHS: 2  # or None



# test
Test:
  TEST_IMG_SIZE: 544
  BATCH_SIZE: 1
  NUMBER_WORKERS: 0
  CONF_THRESH: 0.01
  NMS_THRESH: 0.5
  MULTI_SCALE_TEST: False
  FLIP_TEST: False
